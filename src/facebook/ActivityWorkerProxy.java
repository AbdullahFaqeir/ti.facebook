/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package facebook;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiBaseActivity;
import org.appcelerator.titanium.TiLifecycle.OnInstanceStateEvent;
import org.appcelerator.titanium.TiLifecycle.OnActivityResultEvent;

import android.os.Bundle;
import android.app.Activity;
import android.content.Intent;

import com.facebook.*;
import com.facebook.Session;

@Kroll.proxy(creatableInModule=TiFacebookModule.class)
public class ActivityWorkerProxy extends KrollProxy implements OnActivityResultEvent, OnInstanceStateEvent
{
	private static final String TAG = "FacebookProxy";
	
	private TiFacebookModule module;
	private UiLifecycleHelper uiHelper;

	// Constructor
	public ActivityWorkerProxy()
	{
		super();
		module = TiFacebookModule.getFacebookModule();
	}

	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict options)
	{
		super.handleCreationDict(options);
	}
	
	@Override
	public void initActivity(Activity activity) {}
	

	
	@Override
	public void onCreate(Activity activity, Bundle savedInstanceState) {
		Log.d(TAG,  "onCreate called for facebook proxy");
		uiHelper = new UiLifecycleHelper(activity, module.getSessionStatusCallback());
		((TiBaseActivity) activity).addOnInstanceStateEventListener(this);
		((TiBaseActivity) activity).addOnActivityResultListener(this);
		uiHelper.onCreate(savedInstanceState);
	}
	
	@Override
	public void onResume(Activity activity){
		Log.d(TAG, "Facebook proxy onResume");
		// For scenarios where the main activity is launched and user
		// session is not null, the session state change notification
		// may not be triggered. Trigger it if it's open/closed.
		Session session = Session.getActiveSession();
		if (session != null && (session.isOpened() && !module.getLoggedInVar() ||
				session.isClosed() && module.getLoggedInVar())) {
			Log.d(TAG, "triggering onSessionStateChange in onResume");
			module.onSessionStateChange(session, session.getState(), null);
		} else {
			Log.d(TAG, "session is null or session is in intermediate state");
		}
		uiHelper.onResume();
		AppEventsLogger.activateApp(activity);
	}
	
	@Override
	public void onPause(Activity activity) {
		Log.d(TAG, "Facebook proxy onPause");
		uiHelper.onPause();
		AppEventsLogger.deactivateApp(activity);
	}

	@Override
	public void onActivityResult(Activity activity, int requestCode, int resultCode, Intent data) {
		Log.d(TAG, "Facebook proxy onActivityResult");
		uiHelper.onActivityResult(requestCode, resultCode, data);
	}

	@Override
	public void onDestroy(Activity activity) {
		Log.d(TAG, "Facebook proxy onDestroy");
		uiHelper.onDestroy();
	}

	@Override
	public void onSaveInstanceState(Bundle outState) {
		Log.d(TAG, "Facebook proxy onSaveInstanceState");
		uiHelper.onSaveInstanceState(outState);
	}

	@Override
	public void onRestoreInstanceState(Bundle inState) {
	}	
}