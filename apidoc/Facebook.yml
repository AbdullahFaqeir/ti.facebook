---
name: Modules.Facebook
summary: |
    Add-on Facebook module.  
description: |
    The Facebook module is used for connecting your application with 
    Facebook. This module supports the following features:

    * Logging in to Facebook and authorizing your application.

    * Making requests through the Facebook Graph API using the
      [requestWithGraphPath](Modules.Facebook.requestWithGraphPath) method.
      
    * Posting Facebook dialogs.

    #### Getting Started

    -   Note that this module is only available for Release 3.5.1 and later, and is included with the
        Titanium SDK.  You do not need to download or unpack it.

    -   Edit the `modules` section of your tiapp.xml file to include this module:

            <modules>
                <!-- Add the appropriate line(s) to your modules section -->
                <module platform="android">facebook</module>
                <module platform="iphone">facebook</module>
            </modules>

    -   On the iOS platform, add the following property to your tiapp.xml file and replace
        FACEBOOK_APP_ID with your Facebook application ID:

             <property name="ti.facebook.appid">FACEBOOK_APP_ID</property>

    -   On the Android platform, add the following property to your tiapp.xml file:

        <android xmlns:android="http://schemas.android.com/apk/res/android">
            <manifest>
                <application>
                    <activity android:label="SampleFB"
                        android:name="com.facebook.LoginActivity" android:theme="@android:style/Theme.Translucent.NoTitleBar"/>
                    <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id"/>
                </application>
            </manifest>
        </android>

        Also add the following string resource in a strings.xml file in the project folder 
        /platform/android/res/values/strings.xml and replace FACEBOOK_APP_ID with yout Facebook
        application ID:

        <resources><string name="app_id">495338853813822</string></resources>

    -   On the Android platform, all Windows/TabGroup in the app must create a proxy. We must 
        pass to the proxy the Ti.UI.Window or Ti.UI.TabGroup that will be using the proxy, so 
        that the proxy can attach itself to the window's or tabgroup's activity. The proxy object 
        must be created prior to calling open() on the window or tabgroup in order to make sure 
        the Activity onCreate event is captured correctly. 

            win1.fbProxy = fb.createActivityWorker({lifecycleContainer: win1});

        In Android only a single Activity is active at any time. In Titanium, an Activity corresponds 
        to a standalone (i.e. not a Tab window) Ti.UI.Window or Ti.UI.TabGroup. The Facebook SDK 
        contains tools to synchronize state between the various activities in the app, and this module 
        implements that functionality, but for this to work we need to tell the module which is the 
        currently active Activity.

    -    Instantiate the module with the `require('facebook')` method, then make subsequent API calls
         with the new Facebook object.

             var fb = require('facebook');
             fb.permissions = [FACEBOOK_APP_PERMISSIONS];
             fb.initialize(1000);
             fb.authorize();

    #### Facebook Login and Authorization

    To use Facebook, a user must log in to Facebook and explicitly authorize the application to 
    perform certain actions, such as accessing profile information or posting status messages.

    There are two ways to initiate the login process:

    * Call [authorize](Modules.Facebook.authorize) to prompt the user to login and authorize
      the application.

    * Create a Facebook [LoginButton](Modules.Facebook.LoginButton) to allow the user to 
      log in if desired. You can also add either readPermissions or publishPermissions, 
      otherwise the default is request for `public_profile`. Doing so will let the LoginButton 
      request for permissions when logging in. Note that Facebook does not support setting 
      both parameters at the same time to the LoginButton. 

    Which approach you take depends on your UI and how central Facebook is to your
    application.

    To create a Facebook App ID, go to the Facebook Developer App:
    [developers.facebook.com/apps](https://developers.facebook.com/apps)

    #### Requesting read and publish permissions

    requestNewReadPermissions

        var fb = require('facebook');
        fb.requestNewReadPermissions(['read_stream','user_hometown', etc...], function(e){
            if(e.success){
                fb.requestWithGraphPath(...);
            } else if (e.cancelled){
                ....
            } else {
                Ti.API.debug('Failed authorization due to: ' + e.error);
            }
        });

    requestNewPublishPermissions

    You must use the audience constants from the module, either AUDIENCE_NONE, AUDIENCE_ONLY_ME, 
    AUDIENCE_FRIENDS, or AUDIENCE_EVERYONE. Note that it is not an error for the user to 'Skip' 
    your requested permissions, so you should check the module's permissions property following the call.

        var fb = require('facebook');
        fb.requestNewPublishPermissions(['read_stream','user_hometown', etc...], fb.AUDIENCE_FRIENDS, function(e){
            if(e.success){
                fb.requestWithGraphPath(...);
            } else if (e.cancelled){
            ....
            } else {
                Ti.API.debug('Failed authorization due to: ' + e.error);
            }
        });

    For a complete list of permissions, see the [official Facebook Permissions Reference](https://developers.facebook.com/docs/facebook-login/permissions/)        
    
    #### Share Dialogs

    The Share dialog prompts a person to publish an individual story or an Open Graph story 
    to their timeline. This does not require Facebook Login or any extended permissions, 
    so it is the easiest way to enable sharing on web.

    * First check if you can use it - call fb.getCanPresentShareDialog() which returns a boolean.
    
    * To share a user's status just call fb.share({}); Note: this is documented for iOS but not Android, so use with caution.
    
    * To share a link call fb.share({url: 'http://example.com' });
    
    * To post a graph action call:

        fb.share({url: someUrl, namespaceObject: 'myAppnameSpace:graphObject', objectName: 'graphObject', imageUrl: someImageUrl,
        title: aTitle, description: blahBlah, namespaceAction: 'myAppnameSpace:actionType', placeId: facebookPlaceId});

    For details on dialog see the 
    [official Facebook Share Dialogs documentation](https://developers.facebook.com/docs/sharing/reference/share-dialog).  

    #### Send Requests Dialogs

    Sends an application request. Fires a `sendRequestCompleted` event.

        var fb = require('facebook');
        fb.presentSendRequestDialog({message: 'Go to https://appcelerator.com/'});

    For details on dialog see the 
    [official Facebook Share Dialogs documentation](https://developers.facebook.com/docs/games/requests/v2.2).  

    #### Like Button

    We can create a Like button just like any other view, with specific parameters documented in Facebook docs. 
    Note there is no completion callback or event, and Facebook policies state "If you use the Like button on iOS 
    or Android, don't collect or use any information from it."

        var likeButton = fb.createLikeButton({
            objectId: "https://www.facebook.com/appcelerator", // URL or Facebook ID
            foregroundColor: "white", // A color in Titanium format - see Facebook docs
            likeViewStyle: 'box_count', // standard, button, box_count - see FB docs
            auxiliaryViewPosition: 'inline', // bottom, inline, top - see FB docs
            horizontalAlignment: 'left', // center, left, right - see FB docs,
            objectType: 'page', // iOS only, 'page', 'openGraphObject', or 'unknown' - see FB docs
            soundEnabled: true // boolean, iOS only
        });
        win.add(likeButton); 
    
    #### Events and error handling

    The error handling adheres to the new Facebook guideline for events such as login, shareCompleted and 
    requestSendCompleted. Here is how to handle login events:

        var fb = require('facebook');
        fb.addEventListener('login',function(e) {
            // You *will* get this event if loggedIn == false below
            // Make sure to handle all possible cases of this event
            if (e.success) {
                alert('login from uid: '+e.uid+', name: '+JSON.parse(e.data).name);
                label.text = 'Logged In = ' + fb.loggedIn;
            }
            else if (e.cancelled) {
                // user cancelled 
                alert('cancelled');
            }
            else {
                alert(e.error);         
            }
        });
        fb.addEventListener('logout', function(e) {
            alert('logged out');
            label.text = 'Logged In = ' + fb.loggedIn;
        });

    #### Submitting an iOS Application to the iTunes Store

    When including the Facebook module in an iOS project and built for the iTunes Store, during the
    validation process you may receive an error message referring to an Improper Advertising identifier
    [IDFA] Usage.

    As part of the Apple review process when submitting an application, you will be asked if your app
    uses the Advertising Identifier (IDFA). Please check "Yes". You will then be asked how your app
    makes use of it. The question will take this form:

        This app uses the Advertising Identifier to (select all that apply)?
        - Serve advertisements within the app
        - Attribute this app installation to a previously served advertisement
        - Attribute an action taken within this app to a previously served advertisement

    Select the second and third options.

    You will also be asked to check a box to confirm that your app honors a user's Limit Ad Tracking
    setting in iOS. The Facebook SDK honors the iOS Limited Ad Tracking Setting. When a person enables
    Limited Ad Tracking, Facebook only uses data obtained through the use of the Advertising Identifier
    for "Limited Advertising Purposes" as defined by the iOS Developer Program License Agreement. Please
    make sure to check this box when prompted.

    For more information, see [Facebook Issue #242477629268301](https://developers.facebook.com/bugs/242477629268301/)
    and [TIMODOPEN-391](https://jira.appcelerator.org/browse/TIMODOPEN-391).

extends: Titanium.Module
since: "3.5.1"
platforms: [android, iphone, ipad]
methods:

  - name: initialize
    summary: |
        If there is a cached Facebook session available, the login event will be fired immediately.
    description: |
        Be sure to set your [login](Modules.Facebook.login) and [logout](Modules.Facebook.logout) 
        event listeners before calling `initialize`.

        generated to indicate a successful attempt.
    parameters:
      - name: timeout
        summary: Sets initialize timeout in milliseconds.
        type: Number

  - name: authorize
    summary: |
        Prompts the user to log in (if not already logged in) and authorize your application.
        You can also use [LoginButton](Modules.Facebook.LoginButton) to log in.
    description: |
        Be sure to set your required [permissions](Modules.Facebook.permissions) before 
        calling `authorize`.

        A [login](Modules.Facebook.login) event is generated to indicate successful or
        unsuccessful login attempt.

  - name: logout
    summary: Clears the OAuth `accessToken` and logs out the user.

  - name: getCanPresentShareDialog
    summary: Checks if the device can support the use of Facebook Share dialog from the Facebook App.
    description: |
        This method checks if the device can support the use of Facebook Share dialog from the Facebook App.
        For example:
            if(fb.getCanPresentShareDialog()) {
                fb.presentShareDialog({
                    link: 'https://appcelerator.com/',
                    name: 'great product',
                    description: 'Titanium is a great product',
                    caption: 'it rocks too',
                    picture: 'http://www.appcelerator.com/wp-content/uploads/scale_triangle1.png'
                });
            } else {
                fb.presentWebShareDialog({
                    link: 'https://appcelerator.com/',
                    name: 'great product',
                    description: 'Titanium is a great product',
                    caption: 'it rocks too',
                    picture: 'http://www.appcelerator.com/wp-content/uploads/scale_triangle1.png'
                });
            }
    returns:
        type: Boolean

  - name: presentShareDialog
    summary: |
        Opens a supported Facebook Share dialog from the Facebook App.

        For a list of parameters, and response formats, see the 
        [official documentation for Facebook Dialogs](https://developers.facebook.com/docs/sharing/reference/share-dialog).  

        Be sure to check if the device can support this method by calling [getCanPresentShareDialog](Modules.Facebook.getCanPresentShareDialog)
        before using this method. If true, you can use this method. If false, the Facebook application
        is probably not installed in the device. In this case, please use [presentWebShareDialog](Modules.Facebook.presentWebShareDialog)
        instead.

        A `shareCompleted` event is generated to indicate successful or attempt.
    parameters:
      - name: params
        summary: |
            An object containing parameters required by the call, if any.  
            A dictionary object for setting parameters required by the call, if any.
            For example
            fb.presentShareDialog({
                link: 'https://appcelerator.com/',
                name: 'great product',
                description: 'Titanium is a great product',
                caption: 'it rocks too',
                picture: 'http://www.appcelerator.com/wp-content/uploads/scale_triangle1.png'
            });
        type: Object

  - name: presentWebShareDialog
    summary: |
        Opens a web version of Share Dialog. Does not depend on the Facebook app.
        For a list of parameters, and response formats, see the 
        [official documentation for Facebook Dialogs](https://developers.facebook.com/docs/sharing/reference/share-dialog).  

        This is a fallback for when [presentShareDialog](Modules.Facebook.presentShareDialog) is not
        available.

        A `shareCompleted` event is generated to indicate successful or unsuccessful attempt.
    parameters:
      - name: params
        summary: |
            A dictionary object containing parameters required by the call, if any.
            For example
            fb.presentWebShareDialog({
                link: 'https://appcelerator.com/',
                name: 'great product',
                description: 'Titanium is a great product',
                caption: 'it rocks too',
                picture: 'http://www.appcelerator.com/wp-content/uploads/scale_triangle1.png'
            });
        type: Object

  - name: presentSendRequestDialog
    summary: |
        Opens a supported Facebook dialog.

        For a list of dialogs, parameters, and response formats, see the 
        [official documentation for Facebook Dialogs](https://developers.facebook.com/docs/android/send-requests).  

        A `requestDialogCompleted` event is generated to indicate successful or unsuccessful attempt.
    parameters:
      - name: params
        summary: |
            A dictionary object containing parameters required by the call, if any.
            For example
            fb.presentSendRequestDialog({message: 'Go to https://appcelerator.com/'});
        type: Object

  - name: requestWithGraphPath
    summary: |
        Makes a Facebook Graph API request.

        If the request requires user authorization, the user must be logged in, and your app
        must be authorized to make the request. You can check the
        [loggedIn](Modules.Facebook.loggedIn) property to determine if the user is logged in.

        Every Facebook object has an associated path. For example, "me" requests information about
        the current user.

        For a complete list of Graph API methods, parameters and return types, see the
        [official Facebook Graph API documentation](https://developers.facebook.com/docs/graph-api).
    parameters:

      - name: path
        summary: Graph API path to request.  
        type: String

      - name: params
        summary: |
            An object containing parameters required by the call if any.

            The object must be serializable as JSON.
            For example, to set 'redirect' in 'me/picture',
            var params = {'redirect': 'false'};
        type: Object

      - name: httpMethod
        summary: The HTTP method (GET/POST/DELETE) to use for the call.
        type: String

      - name: callback
        summary: Callback to invoke  when the request completes.
        type: Callback<FacebookGraphResponse>

  - name: requestNewReadPermissions
    summary: Makes a request to Facebook for additional read permissions.
    description: |
        Note that it is not an error for the user to 'Skip' your requested permissions, 
        so you should check the module's permissions property following the call using [getPermissions](Modules.Facebook.getPermissions).
    parameters:

      - name: permissions
        summary: |
            Array of additional permissions to request. For a complete list of permissions, see the 
            [official Facebook Permissions Reference](https://developers.facebook.com/docs/facebook-login/permissions/v2.2)
        type: Array<String>

      - name: callback
        summary: Callback to invoke when the request completes.
        type: Callback<FacebookPermissionResponse>

  - name: requestNewPublishPermissions
    summary: Makes a request to Facebook for additional read permissions.
    description: |
        Note that it is not an error for the user to 'Skip' your requested permissions, 
        so you should check the module's permissions property following the call using [getPermissions](Modules.Facebook.getPermissions).
    parameters:

      - name: permissions
        summary: |
            Array of additional permissions to request. For a complete list of permissions, see the 
            [official Facebook Permissions Reference](https://developers.facebook.com/docs/facebook-login/permissions/v2.2)
        type: Array<String>

      - name: audience
        summary: |
            The extent of the visibility read permissions will have. The value of audience should be one of [AUDIENCE_NONE](Modules.Facebook.AUDIENCE_NONE),
            [AUDIENCE_ONLY_ME](Modules.Facebook.AUDIENCE_ONLY_ME), [AUDIENCE_FRIENDS](Modules.Facebook.AUDIENCE_FRIENDS), or [AUDIENCE_EVERYONE](Modules.Facebook.AUDIENCE_EVERYONE).
        type: Number

      - name: callback
        summary: Callback to invoke when the request completes.
        type: Callback<FacebookPermissionResponse>

  - name: refreshPermissionsFromServer
    summary: Makes a request to Facebook to get the latest permissions granted.
    description: |
        Facebook now grants total control over granted permissions, and if the user modified the permissions
        outside of your app your cached token may not be updated. To get the current permissions from 
        Facebook's servers you can call fb.refreshPermissionsFromServer(). 

         A `tokenUpdated` event is generated to notify of a successful completion.
events:

  - name: login
    summary: Fired at session login.
    properties:
      - name: success
        summary: |
            Indicates if the user was logged in successfully.
            Returns `true` if request succeeded, `false` otherwise.
        type: Boolean

      - name: cancelled
        summary: |
            Indicates if the user canceled the login request by closing the dialog.
        type: Number

      - name: error
        summary: |
            Error message, if any returned.
            Will be undefined if `success` is `true`.
        type: String

      - name: uid
        summary: User ID returned by Facebook if the login was successful.
        type: String

      - name: data
        summary: |
            Data returned by Facebook when we query for the UID (using graph path "me")
            after a successful login. Data is in JSON format, and includes information 
            such as user name, locale and gender.

  - name: logout
    summary: Fired at session logout.

  - name: tokenUpdated
    summary: Fired when [refreshPermissionsFromServer](Modules.Facebook.refreshPermissionsFromServer) is completed.

  - name: shareCompleted
    summary: Fired when [presentShareDialog](Modules.Facebook.presentShareDialog) or [presentWebShareDialog](Modules.Facebook.presentWebShareDialog) is closed.
    properties:
      - name: success
        summary: |
            Indicates if the user was logged in successfully.
            Returns `true` if request succeeded, `false` otherwise.
        type: Boolean

      - name: cancelled
        summary: |
            Indicates if the user canceled the login request by closing the dialog.
        type: Number

      - name: error
        summary: |
            Error message, if any returned.
            Will be undefined if `success` is `true`.
        type: String

  - name: requestDialogCompleted
    summary: Fired when [presentShareDialog](Modules.Facebook.presentShareDialog) or [presentWebShareDialog](Modules.Facebook.presentWebShareDialog) is closed.
    properties:
      - name: success
        summary: |
            Indicates if the user was logged in successfully.
            Returns `true` if request succeeded, `false` otherwise.
        type: Boolean

      - name: cancelled
        summary: |
            Indicates if the user canceled the login request by closing the dialog.
        type: Number

      - name: error
        summary: |
            Error message, if any returned.
            Will be undefined if `success` is `true`.
        type: String

properties:
  - name: AUDIENCE_NONE
    summary: |
        Use with [LoginButton.style](Modules.Facebook.requestWithGraphPath) to specify
        the default audience.
    type: Number
    permission: read-only

  - name: AUDIENCE_ONLY_ME
    summary: |
        Use with [LoginButton.style](Modules.Facebook.requestWithGraphPath) to specify
        the default audience.
    type: Number
    permission: read-only

  - name: AUDIENCE_FRIENDS
    summary: |
        Use with [LoginButton.style](Modules.Facebook.requestWithGraphPath) to specify
        the default audience.
    type: Number
    permission: read-only

  - name: AUDIENCE_EVERYONE
    summary: |
        Use with [LoginButton.style](Modules.Facebook.requestWithGraphPath) to specify
        the default audience.
    type: Number
    permission: read-only

  - name: expirationDate
    summary: Time at which the `accessToken` expires.
    type: Date
    permission: read-only

  - name: loggedIn
    summary: Indicates if the user is logged in.
    type: Boolean
    permission: read-only

  - name: permissions
    summary: Array of permissions to request for your app. 
    description: |
        For a complete list of permissions, see the 
        [official Facebook Permissions Reference](https://developers.facebook.com/docs/facebook-login/permissions/v2.2)
    type: Array<String>

  - name: uid
    summary: Unique user ID returned from Facebook.
    type: String
    permission: read-only

examples:

  - title: Authorize
    example: |
        
        Shows official Facebook dialog for logging in the user and prompting the user to approve your 
        requested permissions.  Listen for the module's [login](Modules.Facebook.login) event to 
        determine whether the request succeeded.
        
            var fb = require('facebook');
            fb.addEventListener('login', function(e) {
                if (e.success) {
                    alert('login from uid: '+e.uid+', name: '+JSON.parse(e.data).name);
                    label.text = 'Logged In = ' + fb.loggedIn;
                }
                else if (e.cancelled) {
                    // user cancelled 
                    alert('cancelled');
                }
                else {
                    alert(e.error);         
                }
            });
            fb.authorize();
        
  - title: Logout
    example: |
        
        Logout the user and forget the authorization token.  The 
        [logout](Modules.Facebook.logout) event is fired after the user is logged out.
        
            fb.addEventListener('logout', function(e) {
            	alert('Logged out');
            });
            fb.logout();
        
        
  - title: Authorize/Logout Using the Facebook LoginButton
    example: |
        
        You can use the the native Facebook [LoginButton](Modules.Facebook.LoginButton)
        to allow the user to log in as required. The button updates its state automatically depending 
        on whether the user is logged in or not.  When the user is logged in, then the button 
        will show "Logout", and vice-versa.
        
        Note that you don't need to set a click listener or anything else on the button. 
        To be notified when the user logs in or out, add event listeners for the 
        [login](Modules.Facebook.login) and [logout](Modules.Facebook.logout) events
        provided by the Facebook module, as in the example below.
        
            // Don't forget to set your appid and requested permissions, else the login button
            // won't be effective.
            var win = Ti.UI.createWindow({backgroundColor: 'white'});
            var fb = require('facebook');
            
            fb.addEventListener('login', function(e) {
            	if (e.success) {
            		alert('Logged in');
            	}
            });
            fb.addEventListener('logout', function(e) {
            	alert('Logged out');
            });
                
            // Add the button.  Note that it doesn't need a click event listener.
            win.add(fb.createLoginButton({
                    readPermissions: ['read_stream','email'],
                    top: 50
            }));

            win.open()

  - title: Simple Graph API Call
    example: |
        
        This example makes a call to the "me" graph path, which represents the current
        user. The JSON results are simply displayed in an alert.  This example assumes 
        the user is already logged in. You can check this with <Modules.Facebook.loggedIn>.
        
            fb.requestWithGraphPath('me', {}, 'GET', function(e) {
            	if (e.success) {
            		alert(e.result);
            	} else if (e.error) {
            		alert(e.error);
            	} else {
            		alert('Unknown response');
            	}
            });

  - title: Post a Photo Using the Graph API from the Gallery.
    example: |
        
        This example posts a photo to the user's account using the Graph API.
        This requires the "publish_actions" permission.
    
        var B1_TITLE = 'Upload Photo from Gallery with Graph API';
        var b1 = Ti.UI.createButton({
            title:B1_TITLE,
            left: 10, right: 10, top: 0, height: 80
        }); 

        b1.addEventListener('click', function() {
            Titanium.Media.openPhotoGallery({
                success:function(event)
                {
                    b1.title = 'Uploading Photo...';
                    var data = {picture: event.media};
                    //If publish_actions permission is not granted, request it
                    if(fb.permissions.indexOf('publish_actions') < 0) {
                        fb.requestNewPublishPermissions(['publish_actions'],fb.AUDIENCE_FRIENDS,function(e){
                            if(e.success) {
                                Ti.API.info('Permissions:'+fb.permissions);
                                fb.requestWithGraphPath('me/photos', data, "POST", showRequestResult);
                            }
                            if(e.error) {
                                Ti.API.info('Publish permission error');
                            }
                            if(e.cancelled) {
                                Ti.API.info('Publish permission cancelled');
                            }
                        });
                    } else {
                        fb.requestWithGraphPath('me/photos', data, "POST", showRequestResult);
                    }
                },
                cancel:function()
                {
                },
                error:function(error)
                {
                },
                allowEditing:true
            });
        });

        For more information on posting photos, see:

        * [Photo in the Facebook Graph API Reference](https://developers.facebook.com/docs/graph-api/reference/v2.2/photo) 
        
  - title: Post a Photo Using the Graph API with an image in resources directory
    example: |
        
        This example posts a photo to the user's account using the Graph API.
        This requires the "publish_actions" permission.

        var B2_TITLE = 'Upload Photo from file with Graph API';
        var b2 = Ti.UI.createButton({
            title: B2_TITLE,
            left: 10, right: 10, top: 90, height: 80
        });  

        b2.addEventListener('click', function() {
            b2.title = 'Uploading Photo...';
            var f = Ti.Filesystem.getFile(Ti.Filesystem.resourcesDirectory, 'images', 'flower.jpg');
            var blob = f.read();
            var data = {
                caption: 'behold, a flower',
                picture: blob
            };
            //If publish_actions permission is not granted, request it
            if(fb.permissions.indexOf('publish_actions') < 0) {
                fb.requestNewPublishPermissions(['publish_actions'],fb.AUDIENCE_FRIENDS,function(e){
                    if(e.success) {
                        Ti.API.info('Permissions:'+fb.permissions);
                        fb.requestWithGraphPath('me/photos', data, "POST", showRequestResult);
                    }
                    if(e.error) {
                        Ti.API.info('Publish permission error');
                    }
                    if(e.cancelled) {
                        Ti.API.info('Publish permission cancelled');
                    }
                });
            } else {
                fb.requestWithGraphPath('me/photos', data, "POST", showRequestResult);
            }
        });

        For more information on posting photos, see:

        * [Photo in the Facebook Graph API Reference](https://developers.facebook.com/docs/graph-api/reference/v2.2/photo) 

  - title: Show the Share Dialog
    example: |
        
        This example shows how to use the Share Dialog.
        
        var wallDialog = Ti.UI.createButton({
            title: 'Share URL with Share Dialog',
            top: 135, left: 10, right: 10, height: 40
        });

        wallDialog.addEventListener('click', function() {       
            if(fb.getCanPresentShareDialog()) {
                fb.presentShareDialog({
                    link: 'https://appcelerator.com/',
                    name: 'great product',
                    description: 'Titanium is a great product',
                    caption: 'it rocks too',
                    picture: 'http://www.appcelerator.com/wp-content/uploads/scale_triangle1.png'
                });
            } else {
                fb.presentWebShareDialog({
                    link: 'https://appcelerator.com/',
                    name: 'great product',
                    description: 'Titanium is a great product',
                    caption: 'it rocks too',
                    picture: 'http://www.appcelerator.com/wp-content/uploads/scale_triangle1.png'
                });
            }
        });

        For more information on Facebook Dialogs, see:

        * [Facebook Share Dialog Reference](https://developers.facebook.com/docs/sharing/reference/share-dialog) 

  - title: Requesting additional permissions
    example: |

        This example shows how to use the `requestNewPublishPermissions` method to request additional permissions
        to publish a post to the user's wall.

            fb.requestNewPublishPermissions(['publish_actions'],fb.AUDIENCE_FRIENDS,function(e){
                if(e.success){
                    fb.requestWithGraphPath('me/feed', null, "POST", showRequestResult);
                } else {
                    Ti.API.debug('Failed authorization due to: ' + e.error);
                }
            });

---
name: FacebookGraphResponse
extends: ErrorResponse
summary: |
    Argument passed to the graph API callback, in response to a
    [requestWithGraphPath](Modules.Facebook.requestWithGraphPath) call.
properties:
  - name: result
    summary: |
        If successful, returns the JSON response returned by Facebook.
        If the request is not successfully completed, the result is undefined.
    type: String

---
name: FacebookPermissionResponse
extends: ErrorResponse
summary: Argument passed to the dialog callback when a dialog is completed or canceled.
description: |
    The `success` and `cancelled` properties may not be reliable for dialogs. In the event
    that the user canceled the dialog, the `result` field is `undefined`.
properties:

  - name: cancelled
    summary: Indicates if the user canceled the dialog. 
    type: Boolean

  - name: success
    summary: |
        Indicates if successful
    type: Boolean

  - name: error
    summary: |
        Error message, if any returned.
        Will be undefined if `success` is `true`.
    type: String
